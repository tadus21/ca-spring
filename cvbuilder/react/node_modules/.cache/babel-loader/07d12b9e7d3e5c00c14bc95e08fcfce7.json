{"ast":null,"code":"import _slicedToArray from \"/Users/tadaso/Workspace/projects/ca/ca-spring/cvbuilder/academy-java-react-group/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport { API_DOMAIN } from \"./constants\";\n\nconst useFetch = url => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1]; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  async function fetchData() {\n    try {\n      const response = await fetch(\"\".concat(API_DOMAIN).concat(url));\n      const json = await response.json();\n\n      if (!response.ok) {\n        throw Error(response.statusText);\n      } else {\n        setData(json);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    loading,\n    data,\n    setData\n  };\n};\n\nconst usePost = url => {\n  const _useState5 = useState(true),\n        _useState6 = _slicedToArray(_useState5, 2),\n        loading = _useState6[0],\n        setLoading = _useState6[1];\n\n  async function postData(request) {\n    const response = await fetch(\"\".concat(API_DOMAIN).concat(url), {\n      body: request,\n      method: 'POST'\n    });\n    await response.json();\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    } else {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    postData();\n  }, []);\n  return {\n    loading\n  };\n};\n\nexport { useFetch, usePost };","map":{"version":3,"sources":["/Users/tadaso/Workspace/projects/ca/ca-spring/cvbuilder/academy-java-react-group/src/app/utils/fetch-hook.js"],"names":["useEffect","useState","API_DOMAIN","useFetch","url","data","setData","loading","setLoading","fetchData","response","fetch","json","ok","Error","statusText","error","console","log","usePost","postData","request","body","method"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,UAAR,QAAyB,aAAzB;;AAEA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAAA,oBACEH,QAAQ,CAAC,IAAD,CADV;AAAA;AAAA,QACfI,IADe;AAAA,QACTC,OADS;;AAAA,qBAEQL,QAAQ,CAAC,IAAD,CAFhB;AAAA;AAAA,QAEfM,OAFe;AAAA,QAENC,UAFM,kBAItB;;;AACA,iBAAeC,SAAf,GAA2B;AACzB,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,WAAIT,UAAJ,SAAiBE,GAAjB,EAA5B;AACA,YAAMQ,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAnB;;AACA,UAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AAChB,cAAMC,KAAK,CAACJ,QAAQ,CAACK,UAAV,CAAX;AACD,OAFD,MAEO;AACLT,QAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KATD,CASE,OAAOQ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;;AAEDhB,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACF,IAAAA,OAAD;AAAUF,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,GAAP;AACD,CAzBD;;AA2BA,MAAMa,OAAO,GAAIf,GAAD,IAAS;AAAA,qBACOH,QAAQ,CAAC,IAAD,CADf;AAAA;AAAA,QAChBM,OADgB;AAAA,QACPC,UADO;;AAGvB,iBAAeY,QAAf,CAAwBC,OAAxB,EAAiC;AAC/B,UAAMX,QAAQ,GAAG,MAAMC,KAAK,WAAIT,UAAJ,SAAiBE,GAAjB,GAAwB;AAACkB,MAAAA,IAAI,EAAED,OAAP;AAAgBE,MAAAA,MAAM,EAAE;AAAxB,KAAxB,CAA5B;AACA,UAAMb,QAAQ,CAACE,IAAT,EAAN;;AACA,QAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AAChB,YAAMC,KAAK,CAACJ,QAAQ,CAACK,UAAV,CAAX;AACD,KAFD,MAEO;AACLP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAACb,IAAAA;AAAD,GAAP;AACD,CAlBD;;AAoBA,SAAQJ,QAAR,EAAkBgB,OAAlB","sourcesContent":["import {useEffect, useState} from \"react\";\nimport {API_DOMAIN} from \"./constants\";\n\nconst useFetch = url => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  async function fetchData() {\n    try {\n      const response = await fetch(`${API_DOMAIN}${url}`);\n      const json = await response.json();\n      if (!response.ok) {\n        throw Error(response.statusText);\n      } else {\n        setData(json);\n        setLoading(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return {loading, data, setData};\n};\n\nconst usePost = (url) => {\n  const [loading, setLoading] = useState(true);\n\n  async function postData(request) {\n    const response = await fetch(`${API_DOMAIN}${url}`, {body: request, method: 'POST'});\n    await response.json();\n    if (!response.ok) {\n      throw Error(response.statusText);\n    } else {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    postData();\n  }, []);\n\n  return {loading};\n};\n\nexport {useFetch, usePost};"]},"metadata":{},"sourceType":"module"}